storecrosswalk <- as.data.frame(cbind(1:length(storedata), storedata$storeid))
colnames(storecrosswalk) <- c("cntyid","storeid")
store_matched <- cbind(store_matched, storecrosswalk$storeid[store_matched$cntyid])
View(store_matched)
store_matched <- subset(store_matched, select=c("cntyid","storeid"))
View(store_matched)
county_st <- counties_usa[counties_usa$STATEFP10=="04",] #& counties_usa$COUNTYFP10=="013"
utm <- getmode(long2UTM(as.numeric(counties_usa@data$INTPTLON)))
projUTM2 <- paste("+proj=utm +zone=", utm, " +north +datum=WGS84 +units=m +no_defs",sep="")
county_stUTM <- spTransform(counties_usa, CRS(projUTM2))
miles_to_meters <- 1609.344
miles <- 10
radius <- miles * miles_to_meters
cnty_buffer <- gBuffer(spgeom = counties_usa, capStyle="ROUND", joinStyle="ROUND", width= radius, byid = TRUE)
mapview(cnty_buffer, color = "#8AE234") #+ mapview(storedataUTM, color = "#CC0000")
pointsInPolygons1 <- sp::over(x = cnty_buffer, y = storedataUTM, returnList = TRUE)
store_matched <- bind_rows(pointsInPolygons1, .id = "cntyid")
store_matched <- transform(store_matched, cntyid = as.numeric(cntyid), storeid = as.numeric(storeid))
store_matched <- subset(store_matched, select=c("cntyid","storeid"))
cnty_buffer <- gBuffer(spgeom = counties_usa, capStyle="ROUND", joinStyle="ROUND", width= radius, byid = TRUE)
cnty_buffer <- gBuffer(spgeom = county_stUTM, capStyle="ROUND", joinStyle="ROUND", width= radius, byid = TRUE)
mapview(cnty_buffer, color = "#8AE234") #+ mapview(storedataUTM, color = "#CC0000")
pointsInPolygons1 <- sp::over(x = cnty_buffer, y = storedataUTM, returnList = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(usmap, maps, tmap,tmaptools,gganimate,broom,scales, dplyr, foreign,rgdal,hrbrthemes, gganimate, gifski,png,sf, tidyverse, hrbrthemes, lwgeom, rnaturalearth, maps, mapdata, spData, tigris, tidycensus, leaflet, tmap, tmaptools)
theme_set(hrbrthemes::theme_ipsum())
library(ggplot2)      # For plotting
library(tidycensus)   # For downloading Census data
library(tmap)         # For creating tmap
library(tmaptools)    # For reading and processing spatial data related to tmap
library(dplyr)        # For data wrangling
library(sf)           # For reading, writing and working with spatial objects
library(foreign)
library(maps)
library(usmap)
#Get just shape file
data("county_laea", package = "tidycensus")
data("state_laea", package = "tidycensus")
tm_shape(state_laea) +
tm_polygons()
mydata <- read.dta("C:/Users/Jason/Box/SNAP/Distance/data/temp/STARS_2006_2021_R.dta")
mydata <- subset(mydata, !(mydata$st %in% c("GU")))
View(mydata)
mydata <- subset(mydata, (mydata$storeyearstart <=2014 & mydata$storeyearend >=2014 ))
mydata <- mydata[!is.na(mydata$fin_lon),]
mydata <- subset(mydata, fin_lat!=0)
mydata <- mydata %>% mutate(
stfips = fips(st),
GEOID = str_c(stfips,countycode)
)
#Get Collapsed version too
collapsed <- mydata %>%
group_by(GEOID) %>%
summarize(nStores = n())
#Merge
county_laea <- left_join(county_laea, collapsed, by = c("GEOID"))
#Prep for map plots
stores <- sf::st_as_sf(mydata, coords = c("fin_lon", "fin_lat"),
crs = 4326,
agr = "identity")
tm_shape(county_laea) +
tm_polygons() +
tm_bubbles("nStores")
cuts <- c(0, 5, 10, 20, 40, 80, 160, 10000)
mymap <- tm_shape(county_laea, projection = 2163, unit = "mi") +
tm_polygons("nStores",
style = "quantile", # breaks = cuts,
palette = "BuPu",
border.col = "gray",
border.alpha = 0.2,
title = "# of Stores") +
tm_legend(legend.position = c("left", "bottom")) +
tm_layout(title = "# of SNAP-Authorized Stores in 2014",
title.size = 1.1,
title.position = c("center", "top")) +
tm_layout(inner.margins = c(0.06, 0.10, 0.10, 0.08))
# Add the new state layer
mymap <- mymap + tm_shape(state_laea) +
tm_borders(col = "black")
mymap
projUTM2 <- paste("+proj=utm +zone=", utm, " +north +ellps=WGS84 +units=m +no_defs",sep="")
snapdataUTM <- spTransform(snapdata, CRS(projUTM2))
floor((65 + 180) / 6) + 1
(floor((65 + 180) / 6) %% 60) + 1
data(meuse)
library(gapminder)
library(gapminder)
library(gapminder)
library(ggplot2)
library(gapminder)
library(ggplot2)
library(gapminder)
library(ggplot2)
gapminder
data <- gapminder
data = gapminder
View(data)
pacman::p_load(ggplot, gapminder)
pacman::p_load(ggplot2, gapminder)
gapminder
data <- gapminder
gapminder
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
p <- ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
p <- ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
p
p +
geom_point(alpha = 0.3)  +
geom_smooth(method = "loess")
p + geom_density()
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(yea
;
library(gganimate)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
library(magick)
library(gganimate)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year, renderer = magick_renderer()) +
ease_aes('linear')
anim_save("third_saved_animation.mp4", renderer = magick_renderer())
getwd()
p3 <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
anim_save(p3, "third_saved_animation.mp4", renderer = magick_renderer())
anim_save("third_saved_animation.mp4", renderer = magick_renderer())
animate(p3, renderer = sprite_renderer())
animate(p3, renderer = magick_renderer())
p3 <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear') +
enter_fade() +
exit_fade()
animate(p3, renderer = magick_renderer())
animate(p3, renderer = magick_renderer())
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
library(gapminder)
library(gapminder)
library(ggplot2)
install.packages()
install.packages(c("ggplot2", "gapminder"), dependencies=T)
install.packages(c("ggplot2", "gapminder"), dependencies = T)
pacman::p_load(ggplot2, gapminder)
gapminder
data <- gapminder
data = gapminder
View(data)
data <- gapminder
data
data
pacman::p_load(ggplot2, gapminder)
library(gapminder)
library(ggplot2)
install.packages("pacman")
p <- ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
p
p + geom_density()
ggplot(data = gapminder, aes(x = gdpPercap)) + geom_density()
ggplot(data = gapminder, aes(x = gdpPercap, fill = continent)) +
geom_density()
pacman::p_load(ggplot2, gapminder)
library(gapminder)
library(ggplot2)
data <- gapminder
p <- ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
p
p +
geom_point(alpha = 0.3)  +
geom_smooth(method = "loess")
p + geom_density()
ggplot(data = gapminder, aes(x = gdpPercap, fill = continent)) +
geom_density()
library(gganimate)
p3 <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear') +
animate(p3, renderer = magick_renderer())
pacman::p_load(ggplot2, gapminder)
library(gapminder)
library(ggplot2)
data <- gapminder
p <- ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
p
p +
geom_point(alpha = 0.3)  +
geom_smooth(method = "loess")
p + geom_density()
ggplot(data = gapminder, aes(x = gdpPercap, fill = continent)) +
geom_density()
library(gganimate)
p3 <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
p3
xaringan:::inf_mr()
xaringan:::inf_mr()
knitr::opts_chunk$set(echo = T, warning = F, message = F, cache = F)
library(pacman)
p_load(tidyverse)
election_2016 <- read_csv("pres_votes_2004_2020.csv")
# take a peek at the data
election_2016
election <- read_csv("pres_votes_2004_2020.csv")
# take a peek at the data
election
#Load in the census data
census <- read_csv("census.csv")
census
p_load(tidyverse, dplyr)
knitr::opts_chunk$set(echo = T, warning = F, message = F, cache = F)
library(pacman)
p_load(tidyverse, dplyr)
election <- read_csv("pres_votes_2004_2020.csv")
# take a peek at the data
election
#Load in the census data
census <- read_csv("census.csv")
census
joined <- left_join(election, census)
?left_join
joined <- left_join(election, census, by = c('county_fips','year'))
View(joined)
election <- read_csv("pres_votes_2012_2020.csv")
# take a peek at the data
election
#Load in the census data
census <- read_csv("census.csv")
census
joined <- left_join(election, census, by = c('county_fips','year'))
joined <- joined %>%
mutate(share_white = total_white / total/population)
joined <- joined %>%
mutate(share_white = total_white / total_population)
share_repub_summary <- joined %>%
summarize(variable = "share_repub",
min = min(share_repub),
max = max(share_repub),
mean = mean(share_repub),
median = median(share_repub),
sd = sd(share_repub),
n = n())
white_summary <- joined %>%
summarize(variable = "share_white",
min = min(share_white),
max = max(share_white),
mean = mean(share_white),
median = median(share_white),
sd = sd(share_white),
n = n())
# generate a nice table of summary stats (bind_rows "stacks" tibbles)
summary_stats <- bind_rows(share_repub_summary,
white_summary)
# look at your stats
summary_stats
joined %>%
summarize(variable = "share_repub",
min = min(share_repub),
max = max(share_repub),
mean = mean(share_repub),
median = median(share_repub),
sd = sd(share_repub),
n = n())
share_repub_summary
census
share_repub_summary
mean(joined$share_repub)
joined$share_democ
joined$share_repub
View(joined)
joined %>%
summarize(variable = "share_repub",
min = min(share_repub)
)
joined %>%
summarize(min = min(share_repub))
joined <- tibble(joined)
joined <- tibble(joined)
joined %>%
summarize(variable = "share_repub",
min = min(share_repub),
max = max(share_repub),
mean = mean(share_repub),
median = median(share_repub),
sd = sd(share_repub),
n = n(), na.rm=TRUE)
share_repub_summary <- joined %>%
summarize(variable = "share_repub",
min = min(joined$share_repub),
max = max(joined$share_repub),
mean = mean(joined$share_repub),
median = median(joined$hare_repub),
sd = sd(joined$share_repub),
n = n(), na.rm=TRUE)
joined %>%
summarize(variable = "share_repub",
min = min(joined$share_repub, na.rm=TRUE),
max = max(joined$share_repub),
mean = mean(joined$share_repub),
median = median(joined$hare_repub),
sd = sd(joined$share_repub),
n = n())
share_repub_summary <- joined %>%
summarize(variable = "share_repub",
min = min(joined$share_repub, na.rm=TRUE),
max = max(joined$share_repub),
mean = mean(joined$share_repub),
median = median(joined$hare_repub),
sd = sd(joined$share_repub),
n = n())
state_data <- joined %>%
group_by(state, year) %>%
summarize(repub = sum(repub),
democ = sum(democ),
totalvotes = sum(totalvotes),
total_white = sum(total_white),
total_population = sum(total_population)) %>%
mutate(share_white = total_white / total_population,
share_repub = repub / totalvotes)
state_data <- joined %>%
group_by(c('stname', 'year')) %>%
summarize(repub = sum(repub),
democ = sum(democ),
totalvotes = sum(totalvotes),
total_white = sum(total_white),
total_population = sum(total_population))
state_data <- joined %>%
group_by(stname, year) %>%
summarize(repub = sum(repub),
democ = sum(democ),
totalvotes = sum(totalvotes),
total_white = sum(total_white),
total_population = sum(total_population)) %>%
mutate(share_white = total_white / total_population,
share_repub = repub / totalvotes)
state_data <- joined %>%
group_by(stname, year) %>%
summarize(repub = sum(repub),
democ = sum(democ),
totalvotes = sum(totalvotes),
total_white = sum(total_white),
total_population = sum(total_population)) %>%
mutate(share_white = total_white / total_population,
share_repub = repub / totalvotes)
# aggregate to the state level
state_data <- joined %>%
group_by(stname, year) %>%
summarize(repub = sum(repub),
democ = sum(democ),
totalvotes = sum(totalvotes),
total_white = sum(total_white),
total_population = sum(total_population)) %>%
mutate(share_white = total_white / total_population,
share_repub = repub / totalvotes)
# aggregate to the state level
state_data <- joined %>%
group_by(stname, year) %>%
summarize(repub = sum(repub),
democ = sum(democ),
totalvotes = sum(totalvotes),
total_white = sum(total_white),
total_population = sum(total_population)) %>%
mutate(share_white = total_white / total_population,
share_repub = repub / totalvotes)
p_load(tidyverse, dplyr, gganimate)
election <- read_csv("pres_votes_2012_2020.csv")
# take a peek at the data
election
#Load in the census data
census <- read_csv("census.csv")
census
joined <- left_join(election, census, by = c('county_fips','year'))
joined <- joined %>%
mutate(share_white = total_white / total_population)
state_data <- joined %>%
group_by(stname, year) %>%
summarize(repub = sum(repub),
democ = sum(democ),
totalvotes = sum(totalvotes),
total_white = sum(total_white),
total_population = sum(total_population)) %>%
mutate(share_white = total_white / total_population,
share_repub = repub / totalvotes)
state_data
xaringan:::inf_mr()
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=T#, echo=F, warning=F, message=F
)
starwars
starwars %>%
select(name:skin_color, species, -height)
xaringan:::inf_mr()
xaringan:::inf_mr()
pagedown::chrome_print("C:/Users/Jason/Box/Teaching/Jason Cook/FINAN_7821/Lectures/04-Matrices_and_Regression_Logic/04-Matrices_and_Regression_Logic.html")
pagedown::chrome_print("C:/Users/Jason/Box/Teaching/Jason_Cook/FINAN_7821/Lectures/04-Matrices_and_Regression_Logic/04-Matrices_and_Regression_Logic.html")
pagedown::chrome_print("C:/Users/Jason/Box/Teaching/Jason_Cook/FINAN_7821/Lectures/04-Matrices_and_Regression_Logic/04-Matrices_and_Regression_Logic.html")
xaringan:::inf_mr()
xaringan:::inf_mr()
pagedown::chrome_print("C:/Users/Jason/Box/Teaching/Jason_Cook/QAMO_3040_Fall_2021/Lectures/11-Panel_Data_Part_II/11-Panel_Data_Part_II.html")
xaringan:::inf_mr()
xaringan:::inf_mr()
devtools::install_github("gadenbuie/xaringanExtra")
install.packages("processx")
devtools::install_github("gadenbuie/xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra")
library(stringi)
remove.packages("stringi", lib="~/R/win-library/4.0")
devtools::install_github("gadenbuie/xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra")
install.packages(stringi)
install.packages("stringi")
install.packages("stringi")
devtools::install_github("gadenbuie/xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra")
install.packages("digest")
install.packages("digest")
devtools::install_github("gadenbuie/xaringanExtra")
xaringan:::inf_mr()
pagedown::chrome_print("C:/Users/Jason/Box/Teaching/Jason_Cook/QAMO_3040_Fall_2021/Lectures/12-DiD_Part_I/12-DiD_Part_I.html")
xaringan:::inf_mr()
library(magick)
install.packages("magick")
remove.packages("webshot", lib="~/R/win-library/4.0")
remove.packages("magick", lib="~/R/win-library/4.0")
install.packages("magick")
library(webshot)
install.packages("webshot")
library(Rcpp)
remove.packages("Rcpp", lib="~/R/win-library/4.0")
install.packages('Rcpp')
install.packages("Rcpp")
remove.packages("tidyverse", lib="~/R/win-library/4.0")
xaringan:::inf_mr()
xaringan:::inf_mr()
pagedown::chrome_print("C:/Users/Jason/Box/SNAP/Distance/Presentation/SNAP_Distance_Bitler_Cook_Porter.html")
pagedown::chrome_print("C:/Users/Jason/Box/SNAP/Distance/Presentation/SNAP_Distance_Bitler_Cook_Porter.html")
pagedown::chrome_print("C:/Users/Jason/Box/SNAP/Distance/Presentation/SNAP_Distance_Bitler_Cook_Porter.html")
pagedown::chrome_print("C:/Users/Jason/Box/SNAP/Distance/Presentation/SNAP_Distance_Bitler_Cook_Porter.html")
xaringan:::inf_mr()
